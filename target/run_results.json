{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-07-20T06:35:51.822183Z", "invocation_id": "b20f37f6-c90d-499f-9af5-d4297d13a9d8", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.215065Z", "completed_at": "2024-07-20T06:35:46.219242Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.219489Z", "completed_at": "2024-07-20T06:35:46.295486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08579492568969727, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_album", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_album\"\n),\n\nrenamed AS (\n    SELECT\n       album_id,\n       title AS album_title,\n       artist_id\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"chinook\".\"main\".\"stg_album\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.302692Z", "completed_at": "2024-07-20T06:35:46.304261Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.304448Z", "completed_at": "2024-07-20T06:35:46.331654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03414583206176758, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_artist", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_artist\"\n),\n\nrenamed AS (\n    SELECT\n       artist_id,\n       name AS artist_name\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"chinook\".\"main\".\"stg_artist\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.338224Z", "completed_at": "2024-07-20T06:35:46.339771Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.339956Z", "completed_at": "2024-07-20T06:35:46.365188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.032247066497802734, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_customer", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_customer\"\n),\n\nrenamed as (\n    select\n        customer_id,\n        first_name,\n        last_name,\n        company,\n        address,\n        city,\n        state,\n        country,\n        postal_code,\n        phone,\n        fax,\n        email,\n        support_rep_id\n\n    from source\n)\n\nselect * from renamed", "relation_name": "\"chinook\".\"main\".\"stg_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.372007Z", "completed_at": "2024-07-20T06:35:46.374812Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.374996Z", "completed_at": "2024-07-20T06:35:46.400039Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03571605682373047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_customer_marketingsystem", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_customer_marketingsystem\"\n),\n\nrenamed as (\n    select\n        customer_id,\n        first_name,\n        last_name,\n        ltv,\n        propensity_to_leave,\n        customer_segment,\n        engagement_score\n\n    from source\n)\n\nselect * from renamed", "relation_name": "\"chinook\".\"main\".\"stg_customer_marketingsystem\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.409153Z", "completed_at": "2024-07-20T06:35:46.411003Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.411212Z", "completed_at": "2024-07-20T06:35:46.438130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03475213050842285, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_employee", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_employee\"\n),\n\nrenamed AS (\n    SELECT\n*\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"chinook\".\"main\".\"stg_employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.445414Z", "completed_at": "2024-07-20T06:35:46.448173Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.448352Z", "completed_at": "2024-07-20T06:35:46.473398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03339886665344238, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_genre", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_genre\"\n),\n\nrenamed AS (\n    SELECT\n       genre_id,\n       name AS genre_name\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"chinook\".\"main\".\"stg_genre\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.480314Z", "completed_at": "2024-07-20T06:35:46.481885Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.482064Z", "completed_at": "2024-07-20T06:35:46.508826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03409719467163086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_media_type", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_media_type\"\n),\n\nrenamed AS (\n    SELECT\n       media_type_id,\n       name AS media_type_name\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"chinook\".\"main\".\"stg_media_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.515757Z", "completed_at": "2024-07-20T06:35:46.517329Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.517502Z", "completed_at": "2024-07-20T06:35:46.543135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03287768363952637, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.stg_track", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"chinook\".\"main\".\"raw_track\"\n),\n\nrenamed AS (\n    SELECT\n      track_id,\n       name AS track_name,\n       album_id,\n       media_type_id,\n       genre_id,\n       composer AS track_composer_name,\n       milliseconds AS track_milliseconds,\n       bytes AS track_bytes,\n       unit_price AS track_unit_price\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"chinook\".\"main\".\"stg_track\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.550166Z", "completed_at": "2024-07-20T06:35:46.553738Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.553941Z", "completed_at": "2024-07-20T06:35:46.589435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04451894760131836, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"base_exposure_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.596080Z", "completed_at": "2024-07-20T06:35:46.598110Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.598293Z", "completed_at": "2024-07-20T06:35:46.615403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024522066116333008, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"base_metric_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.622092Z", "completed_at": "2024-07-20T06:35:46.626627Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.626958Z", "completed_at": "2024-07-20T06:35:46.665716Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.050473928451538086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"base_node_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.673941Z", "completed_at": "2024-07-20T06:35:46.675922Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.676108Z", "completed_at": "2024-07-20T06:35:46.711860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04480791091918945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"base_node_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.720144Z", "completed_at": "2024-07-20T06:35:46.722848Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.723025Z", "completed_at": "2024-07-20T06:35:46.741077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026296138763427734, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.base_source_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"base_source_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.747930Z", "completed_at": "2024-07-20T06:35:46.750904Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.751089Z", "completed_at": "2024-07-20T06:35:46.770523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027916669845581055, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposures", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"stg_exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.777344Z", "completed_at": "2024-07-20T06:35:46.780774Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.780972Z", "completed_at": "2024-07-20T06:35:46.802779Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030685901641845703, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metrics", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"stg_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.809449Z", "completed_at": "2024-07-20T06:35:46.815812Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.816023Z", "completed_at": "2024-07-20T06:35:46.832422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028213024139404297, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "relation_name": "\"chinook\".\"main\".\"stg_naming_convention_folders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.838988Z", "completed_at": "2024-07-20T06:35:46.847064Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.847262Z", "completed_at": "2024-07-20T06:35:46.863673Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029850006103515625, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "relation_name": "\"chinook\".\"main\".\"stg_naming_convention_prefixes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:46.870275Z", "completed_at": "2024-07-20T06:35:46.875687Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:46.875875Z", "completed_at": "2024-07-20T06:35:47.102524Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24343490600585938, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_nodes", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"stg_nodes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:47.115183Z", "completed_at": "2024-07-20T06:35:47.118291Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:47.118472Z", "completed_at": "2024-07-20T06:35:47.138734Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028820037841796875, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_sources", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "\"chinook\".\"main\".\"stg_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:47.145311Z", "completed_at": "2024-07-20T06:35:47.146916Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:47.147083Z", "completed_at": "2024-07-20T06:35:47.164883Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028627872467041016, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.dim_customer", "compiled": true, "compiled_code": "\n\nWITH customer AS (\n    SELECT\n        customer_id,\n        first_name,\n        last_name,\n        company,\n        address,\n        city,\n        state,\n        country,\n        postal_code,\n        phone,\n        fax,\n        email\n\n    FROM \"chinook\".\"main\".\"stg_customer\"\n)\n\nSELECT * FROM customer", "relation_name": "\"chinook\".\"main_human_resources\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:47.175399Z", "completed_at": "2024-07-20T06:35:47.177668Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:47.177849Z", "completed_at": "2024-07-20T06:35:47.201184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04172182083129883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.dim_track", "compiled": true, "compiled_code": "\n\n     WITH track AS (\n          SELECT track_id, \n                 track.track_name,\n                 artist.artist_name,\n                 track.track_composer_name,\n                 album.album_title,\n                 genre.genre_name,\n                 track.track_milliseconds,\n                 track.track_bytes,\n                 media_type.media_type_name\n            FROM \"chinook\".\"main\".\"stg_track\" track\n       LEFT JOIN \"chinook\".\"main\".\"stg_album\" album USING (album_id)\n       LEFT JOIN \"chinook\".\"main\".\"stg_artist\" artist USING (artist_id)\n       LEFT JOIN \"chinook\".\"main\".\"stg_genre\" genre USING (genre_id)\n       LEFT JOIN \"chinook\".\"main\".\"stg_media_type\" media_type USING (media_type_id)\n     )\n     \n     SELECT * FROM track", "relation_name": "\"chinook\".\"main\".\"dim_track\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:47.218761Z", "completed_at": "2024-07-20T06:35:47.221141Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:47.221335Z", "completed_at": "2024-07-20T06:35:47.239123Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026428937911987305, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from \"chinook\".\"main\".\"base_exposure_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "relation_name": "\"chinook\".\"main\".\"stg_exposure_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:47.246575Z", "completed_at": "2024-07-20T06:35:47.248530Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:47.248710Z", "completed_at": "2024-07-20T06:35:47.266740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027624130249023438, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from \"chinook\".\"main\".\"base_metric_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "relation_name": "\"chinook\".\"main\".\"stg_metric_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:48.754678Z", "completed_at": "2024-07-20T06:35:48.761094Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:48.761585Z", "completed_at": "2024-07-20T06:35:48.803058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06856083869934082, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from \"chinook\".\"main\".\"base_node_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "relation_name": "\"chinook\".\"main\".\"stg_node_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:48.826722Z", "completed_at": "2024-07-20T06:35:48.890387Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:48.890587Z", "completed_at": "2024-07-20T06:35:48.902780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08498787879943848, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.stg_columns", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n    \n\n        (\n            select\n                cast('\"chinook\".\"main\".\"base_node_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as character varying(256)) as \"node_unique_id\" ,\n                    cast(\"name\" as character varying(256)) as \"name\" ,\n                    cast(\"description\" as character varying(256)) as \"description\" ,\n                    cast(\"data_type\" as character varying(256)) as \"data_type\" ,\n                    cast(\"constraints\" as character varying(256)) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as BOOLEAN) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as INTEGER) as \"constraints_count\" ,\n                    cast(\"quote\" as character varying(256)) as \"quote\" \n\n            from \"chinook\".\"main\".\"base_node_columns\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"chinook\".\"main\".\"base_source_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as character varying(256)) as \"node_unique_id\" ,\n                    cast(\"name\" as character varying(256)) as \"name\" ,\n                    cast(\"description\" as character varying(256)) as \"description\" ,\n                    cast(\"data_type\" as character varying(256)) as \"data_type\" ,\n                    cast(\"constraints\" as character varying(256)) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as BOOLEAN) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as INTEGER) as \"constraints_count\" ,\n                    cast(\"quote\" as character varying(256)) as \"quote\" \n\n            from \"chinook\".\"main\".\"base_source_columns\"\n\n            \n        )\n\n        \n)\n\nselect * from final", "relation_name": "\"chinook\".\"main\".\"stg_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:48.911999Z", "completed_at": "2024-07-20T06:35:48.989304Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:48.989497Z", "completed_at": "2024-07-20T06:35:49.047817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15004491806030273, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n    \n\n        (\n            select\n                cast('\"chinook\".\"main\".\"stg_nodes\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as character varying(256)) as \"unique_id\" ,\n                    cast(\"name\" as character varying(256)) as \"name\" ,\n                    cast(\"resource_type\" as character varying(256)) as \"resource_type\" ,\n                    cast(\"file_path\" as character varying(256)) as \"file_path\" ,\n                    cast(\"is_enabled\" as BOOLEAN) as \"is_enabled\" ,\n                    cast(\"materialized\" as character varying(256)) as \"materialized\" ,\n                    cast(\"on_schema_change\" as character varying(256)) as \"on_schema_change\" ,\n                    cast(\"model_group\" as character varying(256)) as \"model_group\" ,\n                    cast(\"access\" as character varying(256)) as \"access\" ,\n                    cast(\"latest_version\" as character varying(256)) as \"latest_version\" ,\n                    cast(\"version\" as character varying(256)) as \"version\" ,\n                    cast(\"deprecation_date\" as character varying(256)) as \"deprecation_date\" ,\n                    cast(\"is_contract_enforced\" as BOOLEAN) as \"is_contract_enforced\" ,\n                    cast(\"total_defined_columns\" as INTEGER) as \"total_defined_columns\" ,\n                    cast(\"total_described_columns\" as INTEGER) as \"total_described_columns\" ,\n                    cast(\"database\" as character varying(256)) as \"database\" ,\n                    cast(\"schema\" as character varying(256)) as \"schema\" ,\n                    cast(\"package_name\" as character varying(256)) as \"package_name\" ,\n                    cast(\"alias\" as character varying(256)) as \"alias\" ,\n                    cast(\"is_described\" as BOOLEAN) as \"is_described\" ,\n                    cast(\"column_name\" as character varying(256)) as \"column_name\" ,\n                    cast(\"meta\" as character varying(256)) as \"meta\" ,\n                    cast(\"hard_coded_references\" as character varying(256)) as \"hard_coded_references\" ,\n                    cast(\"number_lines\" as INTEGER) as \"number_lines\" ,\n                    cast(\"sql_complexity\" as FLOAT) as \"sql_complexity\" ,\n                    cast(\"macro_dependencies\" as character varying(256)) as \"macro_dependencies\" ,\n                    cast(\"is_generic_test\" as BOOLEAN) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as BOOLEAN) as \"is_excluded\" ,\n                    cast(null as character varying(256)) as \"exposure_type\" ,\n                    cast(null as character varying(256)) as \"maturity\" ,\n                    cast(null as character varying(256)) as \"url\" ,\n                    cast(null as character varying(256)) as \"owner_name\" ,\n                    cast(null as character varying(256)) as \"owner_email\" ,\n                    cast(null as character varying(256)) as \"metric_type\" ,\n                    cast(null as character varying(256)) as \"label\" ,\n                    cast(null as character varying(256)) as \"metric_filter\" ,\n                    cast(null as character varying(256)) as \"metric_measure\" ,\n                    cast(null as character varying(256)) as \"metric_measure_alias\" ,\n                    cast(null as character varying(256)) as \"numerator\" ,\n                    cast(null as character varying(256)) as \"denominator\" ,\n                    cast(null as character varying(256)) as \"expr\" ,\n                    cast(null as character varying(256)) as \"metric_window\" ,\n                    cast(null as character varying(256)) as \"grain_to_date\" ,\n                    cast(null as character varying(256)) as \"source_name\" ,\n                    cast(null as BOOLEAN) as \"is_source_described\" ,\n                    cast(null as character varying(256)) as \"loaded_at_field\" ,\n                    cast(null as character varying(256)) as \"loader\" ,\n                    cast(null as character varying(256)) as \"identifier\" \n\n            from \"chinook\".\"main\".\"stg_nodes\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"chinook\".\"main\".\"stg_exposures\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as character varying(256)) as \"unique_id\" ,\n                    cast(\"name\" as character varying(256)) as \"name\" ,\n                    cast(\"resource_type\" as character varying(256)) as \"resource_type\" ,\n                    cast(\"file_path\" as character varying(256)) as \"file_path\" ,\n                    cast(null as BOOLEAN) as \"is_enabled\" ,\n                    cast(null as character varying(256)) as \"materialized\" ,\n                    cast(null as character varying(256)) as \"on_schema_change\" ,\n                    cast(null as character varying(256)) as \"model_group\" ,\n                    cast(null as character varying(256)) as \"access\" ,\n                    cast(null as character varying(256)) as \"latest_version\" ,\n                    cast(null as character varying(256)) as \"version\" ,\n                    cast(null as character varying(256)) as \"deprecation_date\" ,\n                    cast(null as BOOLEAN) as \"is_contract_enforced\" ,\n                    cast(null as INTEGER) as \"total_defined_columns\" ,\n                    cast(null as INTEGER) as \"total_described_columns\" ,\n                    cast(null as character varying(256)) as \"database\" ,\n                    cast(null as character varying(256)) as \"schema\" ,\n                    cast(\"package_name\" as character varying(256)) as \"package_name\" ,\n                    cast(null as character varying(256)) as \"alias\" ,\n                    cast(\"is_described\" as BOOLEAN) as \"is_described\" ,\n                    cast(null as character varying(256)) as \"column_name\" ,\n                    cast(\"meta\" as character varying(256)) as \"meta\" ,\n                    cast(null as character varying(256)) as \"hard_coded_references\" ,\n                    cast(null as INTEGER) as \"number_lines\" ,\n                    cast(null as FLOAT) as \"sql_complexity\" ,\n                    cast(null as character varying(256)) as \"macro_dependencies\" ,\n                    cast(null as BOOLEAN) as \"is_generic_test\" ,\n                    cast(null as BOOLEAN) as \"is_excluded\" ,\n                    cast(\"exposure_type\" as character varying(256)) as \"exposure_type\" ,\n                    cast(\"maturity\" as character varying(256)) as \"maturity\" ,\n                    cast(\"url\" as character varying(256)) as \"url\" ,\n                    cast(\"owner_name\" as character varying(256)) as \"owner_name\" ,\n                    cast(\"owner_email\" as character varying(256)) as \"owner_email\" ,\n                    cast(null as character varying(256)) as \"metric_type\" ,\n                    cast(null as character varying(256)) as \"label\" ,\n                    cast(null as character varying(256)) as \"metric_filter\" ,\n                    cast(null as character varying(256)) as \"metric_measure\" ,\n                    cast(null as character varying(256)) as \"metric_measure_alias\" ,\n                    cast(null as character varying(256)) as \"numerator\" ,\n                    cast(null as character varying(256)) as \"denominator\" ,\n                    cast(null as character varying(256)) as \"expr\" ,\n                    cast(null as character varying(256)) as \"metric_window\" ,\n                    cast(null as character varying(256)) as \"grain_to_date\" ,\n                    cast(null as character varying(256)) as \"source_name\" ,\n                    cast(null as BOOLEAN) as \"is_source_described\" ,\n                    cast(null as character varying(256)) as \"loaded_at_field\" ,\n                    cast(null as character varying(256)) as \"loader\" ,\n                    cast(null as character varying(256)) as \"identifier\" \n\n            from \"chinook\".\"main\".\"stg_exposures\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"chinook\".\"main\".\"stg_metrics\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as character varying(256)) as \"unique_id\" ,\n                    cast(\"name\" as character varying(256)) as \"name\" ,\n                    cast(\"resource_type\" as character varying(256)) as \"resource_type\" ,\n                    cast(\"file_path\" as character varying(256)) as \"file_path\" ,\n                    cast(null as BOOLEAN) as \"is_enabled\" ,\n                    cast(null as character varying(256)) as \"materialized\" ,\n                    cast(null as character varying(256)) as \"on_schema_change\" ,\n                    cast(null as character varying(256)) as \"model_group\" ,\n                    cast(null as character varying(256)) as \"access\" ,\n                    cast(null as character varying(256)) as \"latest_version\" ,\n                    cast(null as character varying(256)) as \"version\" ,\n                    cast(null as character varying(256)) as \"deprecation_date\" ,\n                    cast(null as BOOLEAN) as \"is_contract_enforced\" ,\n                    cast(null as INTEGER) as \"total_defined_columns\" ,\n                    cast(null as INTEGER) as \"total_described_columns\" ,\n                    cast(null as character varying(256)) as \"database\" ,\n                    cast(null as character varying(256)) as \"schema\" ,\n                    cast(\"package_name\" as character varying(256)) as \"package_name\" ,\n                    cast(null as character varying(256)) as \"alias\" ,\n                    cast(\"is_described\" as BOOLEAN) as \"is_described\" ,\n                    cast(null as character varying(256)) as \"column_name\" ,\n                    cast(\"meta\" as character varying(256)) as \"meta\" ,\n                    cast(null as character varying(256)) as \"hard_coded_references\" ,\n                    cast(null as INTEGER) as \"number_lines\" ,\n                    cast(null as FLOAT) as \"sql_complexity\" ,\n                    cast(null as character varying(256)) as \"macro_dependencies\" ,\n                    cast(null as BOOLEAN) as \"is_generic_test\" ,\n                    cast(null as BOOLEAN) as \"is_excluded\" ,\n                    cast(null as character varying(256)) as \"exposure_type\" ,\n                    cast(null as character varying(256)) as \"maturity\" ,\n                    cast(null as character varying(256)) as \"url\" ,\n                    cast(null as character varying(256)) as \"owner_name\" ,\n                    cast(null as character varying(256)) as \"owner_email\" ,\n                    cast(\"metric_type\" as character varying(256)) as \"metric_type\" ,\n                    cast(\"label\" as character varying(256)) as \"label\" ,\n                    cast(\"metric_filter\" as character varying(256)) as \"metric_filter\" ,\n                    cast(\"metric_measure\" as character varying(256)) as \"metric_measure\" ,\n                    cast(\"metric_measure_alias\" as character varying(256)) as \"metric_measure_alias\" ,\n                    cast(\"numerator\" as character varying(256)) as \"numerator\" ,\n                    cast(\"denominator\" as character varying(256)) as \"denominator\" ,\n                    cast(\"expr\" as character varying(256)) as \"expr\" ,\n                    cast(\"metric_window\" as character varying(256)) as \"metric_window\" ,\n                    cast(\"grain_to_date\" as character varying(256)) as \"grain_to_date\" ,\n                    cast(null as character varying(256)) as \"source_name\" ,\n                    cast(null as BOOLEAN) as \"is_source_described\" ,\n                    cast(null as character varying(256)) as \"loaded_at_field\" ,\n                    cast(null as character varying(256)) as \"loader\" ,\n                    cast(null as character varying(256)) as \"identifier\" \n\n            from \"chinook\".\"main\".\"stg_metrics\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"chinook\".\"main\".\"stg_sources\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as character varying(256)) as \"unique_id\" ,\n                    cast(\"name\" as character varying(256)) as \"name\" ,\n                    cast(\"resource_type\" as character varying(256)) as \"resource_type\" ,\n                    cast(\"file_path\" as character varying(256)) as \"file_path\" ,\n                    cast(\"is_enabled\" as BOOLEAN) as \"is_enabled\" ,\n                    cast(null as character varying(256)) as \"materialized\" ,\n                    cast(null as character varying(256)) as \"on_schema_change\" ,\n                    cast(null as character varying(256)) as \"model_group\" ,\n                    cast(null as character varying(256)) as \"access\" ,\n                    cast(null as character varying(256)) as \"latest_version\" ,\n                    cast(null as character varying(256)) as \"version\" ,\n                    cast(null as character varying(256)) as \"deprecation_date\" ,\n                    cast(null as BOOLEAN) as \"is_contract_enforced\" ,\n                    cast(null as INTEGER) as \"total_defined_columns\" ,\n                    cast(null as INTEGER) as \"total_described_columns\" ,\n                    cast(\"database\" as character varying(256)) as \"database\" ,\n                    cast(\"schema\" as character varying(256)) as \"schema\" ,\n                    cast(\"package_name\" as character varying(256)) as \"package_name\" ,\n                    cast(\"alias\" as character varying(256)) as \"alias\" ,\n                    cast(\"is_described\" as BOOLEAN) as \"is_described\" ,\n                    cast(null as character varying(256)) as \"column_name\" ,\n                    cast(\"meta\" as character varying(256)) as \"meta\" ,\n                    cast(null as character varying(256)) as \"hard_coded_references\" ,\n                    cast(null as INTEGER) as \"number_lines\" ,\n                    cast(null as FLOAT) as \"sql_complexity\" ,\n                    cast(null as character varying(256)) as \"macro_dependencies\" ,\n                    cast(null as BOOLEAN) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as BOOLEAN) as \"is_excluded\" ,\n                    cast(null as character varying(256)) as \"exposure_type\" ,\n                    cast(null as character varying(256)) as \"maturity\" ,\n                    cast(null as character varying(256)) as \"url\" ,\n                    cast(null as character varying(256)) as \"owner_name\" ,\n                    cast(null as character varying(256)) as \"owner_email\" ,\n                    cast(null as character varying(256)) as \"metric_type\" ,\n                    cast(null as character varying(256)) as \"label\" ,\n                    cast(null as character varying(256)) as \"metric_filter\" ,\n                    cast(null as character varying(256)) as \"metric_measure\" ,\n                    cast(null as character varying(256)) as \"metric_measure_alias\" ,\n                    cast(null as character varying(256)) as \"numerator\" ,\n                    cast(null as character varying(256)) as \"denominator\" ,\n                    cast(null as character varying(256)) as \"expr\" ,\n                    cast(null as character varying(256)) as \"metric_window\" ,\n                    cast(null as character varying(256)) as \"grain_to_date\" ,\n                    cast(\"source_name\" as character varying(256)) as \"source_name\" ,\n                    cast(\"is_source_described\" as BOOLEAN) as \"is_source_described\" ,\n                    cast(\"loaded_at_field\" as character varying(256)) as \"loaded_at_field\" ,\n                    cast(\"loader\" as character varying(256)) as \"loader\" ,\n                    cast(\"identifier\" as character varying(256)) as \"identifier\" \n\n            from \"chinook\".\"main\".\"stg_sources\"\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from \"chinook\".\"main\".\"stg_naming_convention_prefixes\"\n), \n\nnaming_convention_folders as (\n    select * from \"chinook\".\"main\".\"stg_naming_convention_folders\"\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else str_split(name, '_')[1]||'_' \n        end as prefix,\n        \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else naming_convention_prefixes.model_type \n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "relation_name": "\"chinook\".\"main\".\"int_all_graph_resources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.063913Z", "completed_at": "2024-07-20T06:35:49.065802Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.065979Z", "completed_at": "2024-07-20T06:35:49.085463Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03136396408081055, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.dim_customer__engineering", "compiled": true, "compiled_code": "\n\nWITH customer AS (\n    SELECT * FROM \"chinook\".\"main_human_resources\".\"dim_customer\"\n)\n\nSELECT * FROM customer", "relation_name": "\"chinook\".\"main_engineering\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.096638Z", "completed_at": "2024-07-20T06:35:49.098416Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.098597Z", "completed_at": "2024-07-20T06:35:49.116804Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027200937271118164, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_duckdb_chinook.dim_customer__marketing", "compiled": true, "compiled_code": "\n\nWITH customer AS (\n    SELECT\n\n        hr.customer_id,            --HR owned data\n        hr.first_name,             --HR owned data\n        hr.last_name,              --HR owned data\n        ltv,                    -- MARKETING owned data\n        propensity_to_leave,    -- MARKETING owned data\n        customer_segment,       -- MARKETING owned data\n        engagement_score        -- MARKETING owned data\n\n\n    FROM \"chinook\".\"main_human_resources\".\"dim_customer\" AS hr\n    INNER JOIN\n        \"chinook\".\"main\".\"stg_customer_marketingsystem\" AS marketing\n        ON hr.customer_id = marketing.customer_id\n)\n\nSELECT * FROM customer", "relation_name": "\"chinook\".\"main_marketing\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.125324Z", "completed_at": "2024-07-20T06:35:49.130426Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.130615Z", "completed_at": "2024-07-20T06:35:49.154868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035017967224121094, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        count(*) as total_models,\n        sum(is_described_model) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "relation_name": "\"chinook\".\"main\".\"fct_documentation_coverage\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.162004Z", "completed_at": "2024-07-20T06:35:49.165689Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.165871Z", "completed_at": "2024-07-20T06:35:49.184223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02765512466430664, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n\n    \n\n    string_agg(\n        resource_name\n        , ', '\n        order by resource_name\n        ) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates", "relation_name": "\"chinook\".\"main\".\"fct_duplicate_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.191011Z", "completed_at": "2024-07-20T06:35:49.195948Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.196238Z", "completed_at": "2024-07-20T06:35:49.214639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029024124145507812, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_hard_coded_references\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.221546Z", "completed_at": "2024-07-20T06:35:49.223996Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.224180Z", "completed_at": "2024-07-20T06:35:49.245904Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0315549373626709, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from \"chinook\".\"main\".\"stg_naming_convention_prefixes\"\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n\n    \n\n    string_agg(\n        prefix_value\n        , ', '\n        order by prefix_value\n        ) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where models.prefix_value is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_model_naming_conventions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.254683Z", "completed_at": "2024-07-20T06:35:49.256652Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.256836Z", "completed_at": "2024-07-20T06:35:49.274799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025686025619506836, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_public_models_without_contract\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.281765Z", "completed_at": "2024-07-20T06:35:49.283999Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.284187Z", "completed_at": "2024-07-20T06:35:49.303297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026663780212402344, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_directories", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_source_directories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.309772Z", "completed_at": "2024-07-20T06:35:49.311946Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.312136Z", "completed_at": "2024-07-20T06:35:49.330250Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02834010124206543, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_undocumented_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.339869Z", "completed_at": "2024-07-20T06:35:49.342538Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.342785Z", "completed_at": "2024-07-20T06:35:49.364738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030382156372070312, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_undocumented_public_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.371848Z", "completed_at": "2024-07-20T06:35:49.374214Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.374490Z", "completed_at": "2024-07-20T06:35:49.393317Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027256011962890625, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_undocumented_source_tables\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.400461Z", "completed_at": "2024-07-20T06:35:49.403659Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.403866Z", "completed_at": "2024-07-20T06:35:49.421629Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027199983596801758, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_undocumented_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.429106Z", "completed_at": "2024-07-20T06:35:49.431598Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.431797Z", "completed_at": "2024-07-20T06:35:49.450626Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026811838150024414, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from \"chinook\".\"main\".\"int_all_graph_resources\"\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"chinook\".\"main\".\"stg_node_relationships\"\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"chinook\".\"main\".\"stg_exposure_relationships\"\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"chinook\".\"main\".\"stg_metric_relationships\"\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.*,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "relation_name": "\"chinook\".\"main\".\"int_direct_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.457711Z", "completed_at": "2024-07-20T06:35:49.461817Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.462064Z", "completed_at": "2024-07-20T06:35:49.487467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03614997863769531, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_directories", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from \"chinook\".\"main\".\"int_direct_relationships\"\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_test_directories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.495554Z", "completed_at": "2024-07-20T06:35:49.503008Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.503215Z", "completed_at": "2024-07-20T06:35:49.524995Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03525090217590332, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from \"chinook\".\"main\".\"int_direct_relationships\"\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        \n    array[ resource_name ]\n     as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "relation_name": "\"chinook\".\"main\".\"int_all_dag_relationships\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.532502Z", "completed_at": "2024-07-20T06:35:49.577151Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.577341Z", "completed_at": "2024-07-20T06:35:49.601702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0754239559173584, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nrelationships as (\n    select * from \"chinook\".\"main\".\"int_direct_relationships\"\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from \"chinook\".\"main\".\"base_node_columns\"\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as is_primary_key_tested,\n        sum(tests_count) as number_of_tests_on_model,\n        sum(constraints_count) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as is_primary_key_tested,\n        coalesce(agg_test_relationships.number_of_tests_on_model, 0) as number_of_tests_on_model,\n        coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "relation_name": "\"chinook\".\"main\".\"int_model_test_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.609323Z", "completed_at": "2024-07-20T06:35:49.611693Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.611892Z", "completed_at": "2024-07-20T06:35:49.641375Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03780817985534668, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "relation_name": "\"chinook\".\"main\".\"fct_chained_views_dependencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.648847Z", "completed_at": "2024-07-20T06:35:49.651105Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.651317Z", "completed_at": "2024-07-20T06:35:49.689301Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.046154022216796875, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_direct_join_to_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.696367Z", "completed_at": "2024-07-20T06:35:49.698224Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.698399Z", "completed_at": "2024-07-20T06:35:49.726406Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03653120994567871, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_exposure_parents_materializations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.734270Z", "completed_at": "2024-07-20T06:35:49.736252Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.736435Z", "completed_at": "2024-07-20T06:35:49.766132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03721117973327637, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_exposures_dependent_on_private_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.772926Z", "completed_at": "2024-07-20T06:35:49.774832Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.775014Z", "completed_at": "2024-07-20T06:35:49.803860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03619790077209473, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_marts_or_intermediate_dependent_on_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.810678Z", "completed_at": "2024-07-20T06:35:49.813539Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.813743Z", "completed_at": "2024-07-20T06:35:49.844562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04017782211303711, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_directories", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from \"chinook\".\"main\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfolders as (\n    select * from \"chinook\".\"main\".\"stg_naming_convention_folders\"\n), \n\nall_dag_relationships as (\n    select * from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_model_directories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.852310Z", "completed_at": "2024-07-20T06:35:49.855515Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.855743Z", "completed_at": "2024-07-20T06:35:49.907020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06048178672790527, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n\n    \n\n    string_agg(\n        child\n        , ', '\n        order by child\n        ) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_model_fanout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.914248Z", "completed_at": "2024-07-20T06:35:49.916607Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.916780Z", "completed_at": "2024-07-20T06:35:49.945570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03660917282104492, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n\n    \n\n    string_agg(\n        parent\n        , ', '\n        order by parent\n        ) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_multiple_sources_joined\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:49.952348Z", "completed_at": "2024-07-20T06:35:49.955470Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:49.955684Z", "completed_at": "2024-07-20T06:35:50.015440Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06889605522155762, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child as child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_rejoining_of_upstream_concepts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:50.022710Z", "completed_at": "2024-07-20T06:35:50.024640Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:50.024819Z", "completed_at": "2024-07-20T06:35:50.054880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037953853607177734, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_root_models", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_root_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:50.062202Z", "completed_at": "2024-07-20T06:35:50.064756Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:50.064990Z", "completed_at": "2024-07-20T06:35:50.098953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04493403434753418, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n\n    \n\n    string_agg(\n        child\n        , ', '\n        order by child\n        ) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_source_fanout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:51.554195Z", "completed_at": "2024-07-20T06:35:51.562652Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:51.563240Z", "completed_at": "2024-07-20T06:35:51.617295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06947088241577148, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_staging_dependent_on_marts_or_intermediate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:51.624059Z", "completed_at": "2024-07-20T06:35:51.626253Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:51.626469Z", "completed_at": "2024-07-20T06:35:51.657233Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03975105285644531, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_staging_dependent_on_staging\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:51.666116Z", "completed_at": "2024-07-20T06:35:51.668578Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:51.668779Z", "completed_at": "2024-07-20T06:35:51.704937Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04553580284118652, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        count(distinct parent) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_too_many_joins\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:51.712827Z", "completed_at": "2024-07-20T06:35:51.715002Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:51.715194Z", "completed_at": "2024-07-20T06:35:51.744782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037609100341796875, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from \"chinook\".\"main\".\"int_all_dag_relationships\"\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_unused_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:51.751916Z", "completed_at": "2024-07-20T06:35:51.754328Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:51.754507Z", "completed_at": "2024-07-20T06:35:51.771954Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02639317512512207, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "compiled": true, "compiled_code": "with \n\ntests as (\n    select * from \"chinook\".\"main\".\"int_model_test_summary\" \n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select \n        *\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"chinook\".\"main\".\"fct_missing_primary_key_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T06:35:51.779792Z", "completed_at": "2024-07-20T06:35:51.783051Z"}, {"name": "execute", "started_at": "2024-07-20T06:35:51.783232Z", "completed_at": "2024-07-20T06:35:51.806356Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03247809410095215, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from \"chinook\".\"main\".\"int_model_test_summary\"\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        case when number_of_tests_on_model > 0 then 1 else 0 end as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        count(*) as total_models,\n        sum(number_of_tests_on_model) as total_tests,\n        sum(is_tested_model) as tested_models,\n        round(sum(is_tested_model) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "relation_name": "\"chinook\".\"main\".\"fct_test_coverage\""}], "elapsed_time": 5.874530076980591, "args": {"log_file_max_bytes": 10485760, "defer": false, "require_resource_names_without_spaces": false, "log_level_file": "debug", "print": true, "cache_selected_only": false, "log_level": "info", "indirect_selection": "eager", "version_check": true, "invocation_command": "dbt run", "partial_parse": true, "write_json": true, "strict_mode": false, "log_path": "/Users/ashsmith/Documents/dev/dataproducts_with_dbt/logs", "empty": false, "populate_cache": true, "send_anonymous_usage_stats": true, "require_explicit_package_overrides_for_builtin_materializations": true, "select": [], "favor_state": false, "log_format": "default", "project_dir": "/Users/ashsmith/Documents/dev/dataproducts_with_dbt", "introspect": true, "macro_debugging": false, "enable_legacy_logger": false, "exclude": [], "source_freshness_run_project_hooks": false, "warn_error_options": {"include": [], "exclude": []}, "partial_parse_file_diff": true, "quiet": false, "printer_width": 80, "use_colors": true, "vars": {}, "static_parser": true, "use_colors_file": true, "which": "run", "show_resource_report": false, "log_format_file": "debug", "profiles_dir": "/Users/ashsmith/Documents/dev/dataproducts_with_dbt"}}